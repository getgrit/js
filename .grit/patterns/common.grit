pattern AnyEquals($a, $b) = or { `$a == $b` , `$a === $b` , `$b == $a` , `$b === $a` }

pattern AnyAnd($a, $b) = or { `$a && $b` , `$b && $a` }

pattern AnyNotEquals(a, b) = or {
  BinaryExpression(operator = or { "!==" , "!=" }, left = a, right = b)
  BinaryExpression(operator = or { "!==" , "!=" }, left = b, right = a)
}

pattern BuiltInObjects() = or { `Object`, `Math`, `Array`, `Number`, `Date`, `RegExp`, `Map`, `Set`, `Atomics`, `ArrayBuffer`, `SharedArrayBuffer`, `DataView`, `JSON`, `Promise`, `Reflect`, `Proxy` }

pattern AnyEqualsUndefined($aVar) = AnyEquals($aVar,`undefined`)

pattern LiteralValue($v) = or {
  JSXText(value = $v) 
  StringLiteral(value = $v)
  NumericLiteral(value = $v)
  BigIntLiteral(value = $v)
  NullLiteral(value = $v)
  BooleanLiteral(value = $v)
  RegExpLiteral(value = $v)
}

pattern ImportNameFrom($name, $from) = or {
  `import { $..., $name, $... } from '$from'`
  exists $somethingelse in `import { $..., $somethingelse as $name, $... } from '$from'` where warning s"$name imported but as an alias of $somethingelse" on $name
}

predicate IsImported($name, $from) = {
  $name <: exists $stringName in Identifier(name = $stringName) where {
    $program <: File(Program([..., ImportNameFrom(Identifier(name = $stringName), $from) ,...]), _)
  }
}

predicate RemoveImport($name) = {
  $name <: exists $stringName in Identifier(name = $stringName) where {
    $program <: maybe contains ImportNameFrom(Identifier(name = $stringName) => ., _)
  }
}

predicate IsUsed($name) = {
  $program <: contains $name outside ImportNameFrom($_, $_)
}

predicate RemoveImportIfUnused($name) = (! IsUsed($name)) && RemoveImport($name)

predicate IsTypeScript() = $program <: or {
    File(name = or { r".*tsx?", r".*ts?" })
    File(program = contains { TSTypeAnnotation() })
}

pattern ImportedFrom($from) = $name where or {
    $name <: semantic outside ImportNameFrom($name, $from)
    $name <: semantic `require($from)`
    IsImported($name, $from)
  }

predicate AddImport($m, $fromArg) = 
  $fromArg <: let $from in or {
    StringLiteral() as $from
    $_ where $from = StringLiteral(value = $fromArg)
  } where {
    ! $m <: $alreadySolved
    $alreadySolved = or { $alreadySolved, $m }
    $solvedPairs = or { $solvedPairs, `$m, $from` }
    or { and { ! $from <: $froms, $froms = or { $froms, $from } }, true }
  }

predicate ReplaceImport($m, $from) = {
  RemoveImport($m)
  AddImport($m, $from)
}

pattern EnsureImportFrom($from) = and {
  Identifier()
  or {
    exists $alreadyImported in $alreadyImported where { IsImported($alreadyImported, $_), warning "Already imported" on $alreadyImported }
    ImportedFrom($from)
    exists $m in $m where AddImport($m, $from)
    _
  }
}

predicate IsUsed($name) = $program <: contains $name outside or { `$name = $_`, VariableDeclarator(id = $name) }

predicate IsJSGlobalIdentifier($var) = $var <: Identifier(binding = not ["root", ...])

pattern EnsureRelativeImportFrom($current, $imported) = exists $directory, importedPath, $name in $name where {
  $current <: r"(.*)/.*"($directory)
  $importedPath = relative($directory, $imported)
  $name <: EnsureImportFrom(StringLiteral(value = $importedPath))
}

pattern EnsureImportedFrom($imported) = exists $directory, importedPath, $name, $current in $name where {
  $program <: File(_, $current)
  $current <: r"(.*)/.*"($directory)
  $importedPath = relative($directory, $imported)
  $name <: EnsureImportFrom(StringLiteral(value = $importedPath))
}

predicate ensureImportFrom($binding, $from) = {
  $binding <: EnsureImportFrom($from)
}

predicate ensureRelativeImportFrom($binding, $from) = {
  $binding <: EnsureImportedFrom($from)
}

pattern ImportLike() = or { `import { $_ } from '$_'`, `import $_ from '$_'` }

predicate InsertAfterImports($inserted) = {
  $program <: File(Program( 
    or {
      [ ..., [ ImportLike() ]+, . => $inserted, ... ],
      [ . => $inserted, ... ]
    }
  ), _)
}

predicate IsGlobalVariable($id) = {
  $id <: Identifier(binding = [])
}

predicate InsertImports() = or { 
  and {
    $froms <: exists $from, $allFrom, $fromName in $from where {
      $solvedPairs <: maybe { exists $x in `$x, $from` where { $allFrom = [... $allFrom, $x] } }
      $from <: StringLiteral(value = $fromName)
      or {
        $program <: exists $existing, $fromHere in {
          File(Program([
            ...
            ImportDeclaration(specifiers = $existing, source = $fromHere, importKind = "value") where {
              $existing <: not [ImportNamespaceSpecifier()]
              $fromHere <: StringLiteral(value = $fromName) 
              $existing => [ $existing, $allFrom ]
            }
            ...
          ]), _)
        }
        $allNewImports = [$allNewImports, `import { $allFrom } from '$from'`]
      }
    }
    or {
      $allNewImports <: []
      InsertAfterImports(allNewImports)
    }
  }
  true
}

pattern PreludeRun() = _ where {
  $alreadySolved = or { }
  $solvedPairs = or { }
  $froms = or { }
  allNewImports = []
}

pattern ConclusionRun() = InsertImports()

pattern FunctionLike($name, $args, $statements) = or {
  `function $name($args) { $statements }`
  `($args) => { $statements }`
  `($args) => $statements`
}

pattern RandoPattern() = `console.log($any)` => .
